<?php
namespace Avalara;
use GuzzleHttp\Client;

/*****************************************************************************
 *                                                                           *
 *      This file is automatically generated by the AvaTax SDK process.      *
 *                  Edits to this file will be overwritten.                  *
 *                                                                           *
 *****************************************************************************/
 
/*****************************************************************************
 *                              API Methods                                  *
 *****************************************************************************/

 /**
 * Descendant AvaTaxClient that implements all API methods.
 */
class AvaTaxClient extends AvaTaxClientBase
{

@foreach(var m in SwaggerModel.Methods) {
    var paramlist = new System.Text.StringBuilder();
    var guzzleparamlist = new System.Text.StringBuilder();
    var paramcomments = new System.Collections.Generic.List<string>();
    string payload = "null";
    foreach (var p in m.Params) {
        if (p.CleanParamName != "X-Avalara-Client") {
            paramlist.Append("$");
            paramlist.Append(p.CleanParamName);
            paramlist.Append(", ");
            paramcomments.Add("\r\n     * @param " + PhpTypeName(p.TypeName) + " $" + p.CleanParamName + " " + PhpTypeComment(SwaggerModel, p));
            if (p.ParameterLocation == ParameterLocationType.QueryString) {
                guzzleparamlist.Append("'" + p.ParamName + "' => $" + p.CleanParamName + ", ");
            }
            if (p.ParameterLocation == ParameterLocationType.RequestBody) {
                payload = "json_encode($" + p.CleanParamName + ")";
            }
        }
    }
    if (paramlist.Length > 0) paramlist.Length -= 2;
    if (guzzleparamlist.Length > 0) guzzleparamlist.Length -= 2;

<text>
    /**
     * @PhpComment(m.Summary, 5)
     *
     * @PhpComment(m.Description, 5)
     *
     * </text>@foreach (var pc in paramcomments) { Write(pc);}<text>
     * @@return @PhpTypeName(m.ResponseTypeName)
     */
    public function @{Write(FirstCharLower(m.Name) + "(" + paramlist.ToString() + ")");}
    {
        $path = "@m.URI.Replace("{", "{$")";
        $guzzleParams = [
            'query' => [@guzzleparamlist.ToString()],
            'body' => @payload
        ];
        return $this->restCall($path, '@m.HttpVerb.ToUpper()', $guzzleParams);
    }
</text>}

}
?>